#!/usr/bin/env python
# -*- coding: utf8 -*-

# autocompletion osm
# ErshKUS

import cgi
import sys
import json

from sphinxapi import *
import db_config

import psycopg2


MAX_SEARCH_RESULTS_LIMIT = 100
DEFAULT_SEARCH_RESULTS_LIMIT = 7

# sphinx params
class Sphinx:
    HOST = 'localhost'
    PORT = 3312
    INDEX = 'ershkus_search_auto'
    MATCH_MODE = SPH_MATCH_EXTENDED2
    SORT_MODE = SPH_SORT_EXTENDED

EXPAND_TABLE = {
    'М.': ['Малый', 'Малая', 'Малое'],
    'Б.': ['Большой', 'Большая', 'Большое'],
}

def expand(term):
    if term not in EXPAND_TABLE:
        return term
    return '( ' + ' | '.join(EXPAND_TABLE[term]) + ')'

def prepare_query(query):
    words = query.split()
    # query ends on non-space symbol
    if query[-1] == words[-1][-1]:
        words[-1] = words[-1] + '*'

    words = map(expand, words)
    in_name = " | ".join(words)
    other = " ".join(words)
    return other + ' @name ' + in_name

def reverse_parts(s):
    return ", ".join(reversed(s.split(", ")))


def find_matches(query, lat=0, lon=0, bBox=None, limit=DEFAULT_SEARCH_RESULTS_LIMIT):
    if not query:
        raise Exception("ERROR: no query words, 'q' is empty")

    cl = SphinxClient()
    cl.SetServer(Sphinx.HOST, Sphinx.PORT)
    cl.SetMatchMode(Sphinx.MATCH_MODE)

    if (lat and lon):
        cl.SetGeoAnchor("lat", "lon", lat, lon)
        cl.SetSortMode(Sphinx.SORT_MODE, 'addr_type_id ASC @weight DESC @geodist ASC' )
    else:
        cl.SetSortMode(Sphinx.SORT_MODE, 'addr_type_id ASC @weight DESC' )

    real_limit = min(limit, MAX_SEARCH_RESULTS_LIMIT)
    cl.SetLimits(0, 2*real_limit, 4*real_limit)

    query = query.replace("/","\/")
    query = query.replace(",", " ") # ignore comas
    query = query.replace(".", ". ") # split connected by . words
    query = query.replace("-", "\-")

    sphinx_results = []
    sphinx_query = prepare_query(query)

    if bBox:
        # add results within current bbox
        lon_min = bBox[0]
        lat_min = bBox[1]
        lon_max = bBox[2]
        lat_max = bBox[3]
        cl.ResetOnlyFilter()
        cl.SetFilterFloatRange("lat", lat_min, lat_max)
        cl.SetFilterFloatRange("lon", lon_min, lon_max)
        res = cl.Query(sphinx_query, Sphinx.INDEX)
        sphinx_results += res.get("matches", [])

    cl.ResetOnlyFilter()
    res = cl.Query(sphinx_query, Sphinx.INDEX)

    sphinx_results += res.get("matches", [])

    matches = []
    was_before = set()
    for result in sphinx_results:
        # filter dublicates
        index_name = result['attrs']['index_name']
        if index_name in was_before:
            continue
        was_before.add(index_name)

        display_name = result['attrs']['display_name'].decode("utf8")
        name_to_show = reverse_parts(display_name).encode("utf8")

        full_result = result['attrs']
        full_result['id'] = result['id']
        full_result['weight'] = result['weight']
        full_result['name'] = name_to_show

        matches.append(full_result)

    return matches[:real_limit]


def main():
    output={}
    output['ver']='0.6'

    try:
        inputValues = cgi.FieldStorage()
        q = inputValues.getfirst("q","")
        output['search'] = q

        lat = float(inputValues.getfirst("lat","0"))
        lon = float(inputValues.getfirst("lon","0"))
        limit = int(inputValues.getfirst("limit", DEFAULT_SEARCH_RESULTS_LIMIT))
        # nolimit = bool(inputValues.getfirst("nolimit",""))
        # cnt = int(inputValues.getfirst("cnt", "20"))
        bBoxValues = inputValues.getfirst("bbox", None)

        bBox = None
        if bBoxValues:
            bBox = map(float, bBoxValues.split(','))

        matches = find_matches(q, lat=lat, lon=lon, bBox=bBox, limit=limit)
        if matches:
            output['find'] = True
            output['matches'] = matches
        else:
            output['find'] = False
    except Exception, err:
        output['error'] = str(err)

    print "Content-type: text/javascript; Charset=Utf-8\nAccess-Control-Allow-Origin: *\n" # debug
    outCallback = inputValues.getfirst('callback','')
    jsonData = json.dumps(output)
    if outCallback:
        print outCallback + "(" + jsonData + ");"
    else:
        print jsonData


if __name__ == '__main__':
    main()

